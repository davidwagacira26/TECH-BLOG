<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TechFancy Admin Dashboard</title>
    <script src="https://cdn.tiny.cloud/1/1dzoe5ic618sn3ewpbzalon95hegk8meo8imz7nt1hv3exzk/tinymce/7/tinymce.min.js" referrerpolicy="origin"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        :root {
            --primary: #4f46e5;
            --primary-dark: #4338ca;
            --secondary: #10b981;
            --background: #f9fafb;
            --surface: #ffffff;
            --text: #111827;
            --text-secondary: #6b7280;
            --border: #e5e7eb;
            --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            background-color: var(--background);
            color: var(--text);
            line-height: 1.5;
        }

        .layout {
            display: flex;
            min-height: 100vh;
        }

        .sidebar {
            width: 250px;
            background-color: var(--surface);
            border-right: 1px solid var(--border);
            padding: 1.5rem;
        }

        .sidebar-logo {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary);
            margin-bottom: 2rem;
        }

        .sidebar-nav {
            list-style: none;
        }

        .sidebar-nav-item {
            margin-bottom: 0.5rem;
        }

        .sidebar-nav-link {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: var(--text-secondary);
            text-decoration: none;
            border-radius: 0.375rem;
            transition: background-color 0.2s, color 0.2s;
        }

        .sidebar-nav-link:hover,
        .sidebar-nav-link.active {
            background-color: var(--primary);
            color: white;
        }

        .sidebar-nav-link svg {
            width: 1.25rem;
            height: 1.25rem;
            margin-right: 0.75rem;
        }

        .main-content {
            flex: 1;
            padding: 2rem;
            overflow-y: auto;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .page-title {
            font-size: 1.875rem;
            font-weight: 700;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            padding: 0.5rem 1rem;
            background-color: var(--primary);
            color: white;
            border: none;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .btn:hover {
            background-color: var(--primary-dark);
        }

        .btn svg {
            width: 1rem;
            height: 1rem;
            margin-right: 0.5rem;
        }

        .search-form {
            margin-bottom: 1.5rem;
        }

        .search-input {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid var(--border);
            border-radius: 0.375rem;
            font-size: 0.875rem;
            transition: border-color 0.2s;
        }

        .search-input:focus {
            outline: none;
            border-color: var(--primary);
        }

        .tabs {
            display: flex;
            border-bottom: 1px solid var(--border);
            margin-bottom: 1.5rem;
        }

        .tab {
            padding: 0.75rem 1rem;
            color: var(--text-secondary);
            text-decoration: none;
            border-bottom: 2px solid transparent;
            transition: color 0.2s, border-color 0.2s;
        }

        .tab:hover,
        .tab.active {
            color: var(--primary);
            border-bottom-color: var(--primary);
        }

        .card {
            background-color: var(--surface);
            border-radius: 0.5rem;
            box-shadow: var(--shadow);
            overflow: hidden;
        }

        .card-header {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--border);
            font-weight: 600;
        }

        .card-body {
            padding: 1.5rem;
        }

        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

        th, td {
            padding: 0.75rem 1rem;
            text-align: left;
        }

        th {
            background-color: var(--background);
            font-weight: 600;
            color: var(--text-secondary);
            text-transform: uppercase;
            font-size: 0.75rem;
            letter-spacing: 0.05em;
        }

        tr:not(:last-child) td {
            border-bottom: 1px solid var(--border);
        }

        .icon-button {
            background: none;
            border: none;
            cursor: pointer;
            padding: 0.25rem;
            color: var(--text-secondary);
            transition: color 0.2s;
        }

        .icon-button:hover {
            color: var(--primary);
        }

        .icon {
            width: 1.25rem;
            height: 1.25rem;
        }

        .text-yellow {
            color: #fbbf24;
        }

        .text-blue {
            color: #3b82f6;
        }

        #postFormCard {
            margin-top: 2rem;
            display: none;
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal {
            background-color: var(--surface);
            border-radius: 0.5rem;
            box-shadow: var(--shadow);
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .close-button {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--text-secondary);
        }

        form {
            display: grid;
            gap: 1.5rem;
        }

        label {
            font-weight: 500;
            color: var(--text-secondary);
            display: block;
            margin-bottom: 0.5rem;
        }

        input[type="text"],
        input[type="date"],
        select,
        textarea {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid var(--border);
            border-radius: 0.375rem;
            font-size: 0.875rem;
            transition: border-color 0.2s;
        }

        input[type="text"]:focus,
        input[type="date"]:focus,
        select:focus,
        textarea:focus {
            outline: none;
            border-color: var(--primary);
        }

        textarea {
            height: 150px;
            resize: vertical;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .multi-select {
            height: 100px;
            overflow-y: auto;
        }

        .alert {
            padding: 1rem;
            border-radius: 0.375rem;
            margin-bottom: 1rem;
            font-weight: 500;
        }

        .alert-success {
            background-color: #d1fae5;
            color: #065f46;
        }

        .alert-error {
            background-color: #fee2e2;
            color: #991b1b;
        }

        .fullscreen-editor {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 9999;
            background: white;
            display: none;
        }

        .fullscreen-editor .tox-tinymce {
            border: none;
            height: calc(100% - 50px) !important;
        }

        .fullscreen-editor-header {
            height: 50px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 20px;
            background-color: #f1f1f1;
            border-bottom: 1px solid #ccc;
        }

        .fullscreen-editor-title {
            font-size: 18px;
            font-weight: bold;
        }

        .exit-fullscreen-btn {
            background-color: #4f46e5;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
        }

        .exit-fullscreen-btn:hover {
            background-color: #4338ca;
        }

        @media (max-width: 768px) {
            .layout {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
                border-right: none;
                border-bottom: 1px solid var(--border);
            }

            .main-content {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="layout">
        <aside class="sidebar">
            <div class="sidebar-logo">TechFancy</div>
            <nav>
                <ul class="sidebar-nav">
                    <li class="sidebar-nav-item">
                        <a href="/admin" class="sidebar-nav-link active">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
                            </svg>
                            Posts
                        </a>
                    </li>
                    <li class="sidebar-nav-item">
                        <a href="/admin/categories" class="sidebar-nav-link">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                            </svg>
                            Categories
                        </a>
                    </li>
                    <li class="sidebar-nav-item">
                        <a href="/admin/tags" class="sidebar-nav-link">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                            </svg>
                            Tags
                        </a>
                    </li>
                    <li class="sidebar-nav-item">
                        <a href="/" class="sidebar-nav-link">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                            </svg>
                            View Blog
                        </a>
                    </li>
                </ul>
            </nav>
        </aside>

        <main class="main-content">
            <div id="alertContainer"></div>

            <header class="header">
                <h1 class="page-title">Manage Blog Posts</h1>
                <button id="newPostBtn" class="btn">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                    New Post
                </button>
            </header>

            <form class="search-form" action="/admin/search" method="GET">
                <input type="text" name="query" placeholder="Search posts..." class="search-input">
            </form>

            <div class="tabs">
                <a href="/admin" class="tab active">All Posts</a>
                <a href="/admin?filter=featured" class="tab">Featured Posts</a>
                <a    href="/admin?filter=recent" class="tab">Recent Posts</a>
            </div>

            <div class="card">
                <div class="card-header">Blog Posts</div>
                <div class="card-body">
                    <table>
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Date</th>
                                <th>Status</th>
                                <th>Featured</th>
                                <th>Recent</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% posts.forEach(function(post) { %>
                                <tr>
                                    <td><%= post.title %></td>
                                    <td><%= post.date.toISOString().split('T')[0] %></td>
                                    <td><%= post.status %></td>
                                    <td>
                                        <button class="icon-button toggle-featured" data-id="<%= post.id %>">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="icon <%= post.isFeatured ? 'text-yellow' : '' %>" viewBox="0 0 24 24" fill="<%= post.isFeatured ? 'currentColor' : 'none' %>" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon></svg>
                                        </button>
                                    </td>
                                    <td>
                                        <button class="icon-button toggle-recent" data-id="<%= post.id %>">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="icon <%= post.isRecent ? 'text-blue' : '' %>" viewBox="0 0 24 24" fill="<%= post.isRecent ? 'currentColor' : 'none' %>" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>
                                        </button>
                                    </td>
                                    <td>
                                        <button class="icon-button edit-post" data-id="<%= post.id %>">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>
                                        </button>
                                        <button class="icon-button delete-post" data-id="<%= post.id %>">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>
                                        </button>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
            </div>
        </main>
    </div>

    <div class="overlay" id="postFormOverlay">
        <div class="modal">
            <div class="modal-header">
                <h2 id="formTitle">New Post</h2>
                <button class="close-button" id="closeFormBtn">&times;</button>
            </div>
            <div class="modal-body">
                <form id="postForm" action="/admin/create" method="POST" enctype="multipart/form-data">
                    <input type="hidden" id="postId" name="id">
                    <div>
                        <label for="title">Title:</label>
                        <input type="text" id="title" name="title" required>
                    </div>
                    <div>
                        <label for="content">Content:</label>
                        <textarea id="content" name="content"></textarea>
                    </div>
                    <div>
                        <label for="date">Date:</label>
                        <input type="date" id="date" name="date" required>
                    </div>
                    <div>
                        <label for="status">Status:</label>
                        <select id="status" name="status" required>
                            <option value="Draft">Draft</option>
                            <option value="Published">Published</option>
                        </select>
                    </div>
                    <div>
                        <label for="thumbnail">Thumbnail:</label>
                        <input type="file" id="thumbnail" name="thumbnail" accept="image/*">
                    </div>
                    <div class="checkbox-group">
                        <input type="checkbox" id="isFeatured" name="isFeatured">
                        <label for="isFeatured">Featured Post</label>
                    </div>
                    <div class="checkbox-group">
                        <input type="checkbox" id="isRecent" name="isRecent">
                        <label for="isRecent">Recent Post</label>
                    </div>
                    <div>
                        <label for="categories">Categories:</label>
                        <select id="categories" name="categoryIds" multiple class="multi-select">
                            <% categories.forEach(function(category) { %>
                                <option value="<%= category.id %>"><%= category.name %></option>
                            <% }); %>
                        </select>
                    </div>
                    <div>
                        <label for="newCategory">New Category:</label>
                        <input type="text" id="newCategory" name="newCategory">
                        <button type="button" onclick="addCategory()" class="btn">Add Category</button>
                    </div>
                    <div>
                        <label for="tags">Tags:</label>
                        <select id="tags" name="tagIds" multiple class="multi-select">
                            <% tags.forEach(function(tag) { %>
                                <option value="<%= tag.id %>"><%= tag.name %></option>
                            <% }); %>
                        </select>
                    </div>
                    <div>
                        <label for="newTag">New Tag:</label>
                        <input type="text" id="newTag" name="newTag">
                        <button type="button" onclick="addTag()" class="btn">Add Tag</button>
                    </div>
                    <button type="submit" class="btn">Save Post</button>
                </form>
            </div>
        </div>
    </div>
    <div class="fullscreen-editor" id="fullscreenEditor">
        <div class="fullscreen-editor-header">
            <span class="fullscreen-editor-title">Full Screen Editor</span>
            <button class="exit-fullscreen-btn" id="exitFullscreenBtn">Exit Full Screen</button>
        </div>
        <textarea id="fullscreenContent"></textarea>
    </div>

    <script>
        let editor;

        document.addEventListener('DOMContentLoaded', function() {
            initTinyMCE();
            setupEventListeners();
        });

        function initTinyMCE() {
            tinymce.init({
                selector: '#content',
                plugins: [
                    'anchor', 'autolink', 'charmap', 'codesample', 'emoticons', 'image', 'link', 'lists', 'media', 'searchreplace', 'table', 'visualblocks', 'wordcount',
                    'checklist', 'mediaembed', 'casechange', 'export', 'formatpainter', 'pageembed', 'permanentpen', 'powerpaste', 'advtable', 'advcode', 'editimage', 'tinycomments', 'mentions', 'tinymcespellchecker', 'a11ychecker', 'tinydrive'
                ],
                toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck typography | align lineheight | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
                tinycomments_mode: 'embedded',
                tinycomments_author: 'Author name',
                mergetags_list: [
                    { value: 'First.Name', title: 'First Name' },
                    { value: 'Email', title: 'Email' },
                ],
                ai_request: (request, respondWith) => respondWith.string(() => Promise.reject("See docs to implement AI Assistant")),
                setup: function (ed) {
                    editor = ed;
                },
            });
            
            tinymce.init({
                selector: '#fullscreenContent',
                plugins: [
                    'anchor', 'autolink', 'charmap', 'codesample', 'emoticons', 'image', 'link', 'lists', 'media', 'searchreplace', 'table', 'visualblocks', 'wordcount',
                    'checklist', 'mediaembed', 'casechange', 'export', 'formatpainter', 'pageembed', 'permanentpen', 'powerpaste', 'advtable', 'advcode', 'editimage', 'tinycomments', 'mentions', 'tinymcespellchecker', 'a11ycheck', 'tinydrive'
                ],
                toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck typography | align lineheight | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
                tinycomments_mode: 'embedded',
                tinycomments_author: 'Author name',
                mergetags_list: [
                    { value: 'First.Name', title: 'First Name' },
                    { value: 'Email', title: 'Email' },
                ],
                ai_request: (request, respondWith) => respondWith.string(() => Promise.reject("See docs to implement AI Assistant")),
                setup: function (ed) {
                    fullscreenEditor = ed;
                },
            });
        }

        

        

        function setupEventListeners() {
            document.getElementById('newPostBtn').addEventListener('click', showNewPostForm);
            document.getElementById('closeFormBtn').addEventListener('click', hidePostForm);
            document.getElementById('fullscreenEditorBtn').addEventListener('click', openFullscreenEditor);
            document.getElementById('exitFullscreenBtn').addEventListener('click', closeFullscreenEditor);
        }
            document.getElementById('postForm').addEventListener('submit', handlePostSubmit);
            
            document.querySelectorAll('.edit-post').forEach(button => {
                button.addEventListener('click', handleEditPost);
            });
            document.querySelectorAll('.delete-post').forEach(button => {
                button.addEventListener('click', handleDeletePost);
            });
            document.querySelectorAll('.toggle-featured').forEach(button => {
                button.addEventListener('click', handleToggleFeatured);
            });
            document.querySelectorAll('.toggle-recent').forEach(button => {
                button.addEventListener('click', handleToggleRecent);
            });
        

        function closeFullscreenEditor() {
            const content = fullscreenEditor.getContent();
            editor.setContent(content);
            document.getElementById('fullscreenEditor').style.display = 'none';
        }


        function showNewPostForm() {
            document.getElementById('postFormOverlay').style.display = 'flex';
            document.getElementById('formTitle').textContent = 'New Post';
            document.getElementById('postForm').reset();
            document.getElementById('postForm').action = '/admin/create';
            editor.setContent('');
        }

        function hidePostForm() {
            document.getElementById('postFormOverlay').style.display = 'none';
        }

        async function handleEditPost(event) {
            const postId = event.currentTarget.getAttribute('data-id');
            try {
                const response = await axios.get(`/admin/post/${postId}`);
                const post = response.data.post;
                document.getElementById('postFormOverlay').style.display = 'flex';
                document.getElementById('formTitle').textContent = 'Edit Post';
                document.getElementById('postId').value = post.id;
                document.getElementById('title').value = post.title;
                editor.setContent(post.content);
                document.getElementById('date').value = post.date.split('T')[0];
                document.getElementById('status').value = post.status;
                document.getElementById('isFeatured').checked = post.isFeatured;
                document.getElementById('isRecent').checked = post.isRecent;
                
                const categorySelect = document.getElementById('categories');
                Array.from(categorySelect.options).forEach(option => {
                    option.selected = post.categories.some(cat => cat.id === parseInt(option.value));
                });

                const tagSelect = document.getElementById('tags');
                Array.from(tagSelect.options).forEach(option => {
                    option.selected = post.tags.some(tag => tag.id === parseInt(option.value));
                });

                document.getElementById('postForm').action = `/admin/update/${post.id}`;
            } catch (error) {
                console.error('Error fetching post:', error);
                showAlert('Error fetching post data', 'error');
            }
        }

        async function handleDeletePost(event) {
            if (confirm('Are you sure you want to delete this post?')) {
                const postId = event.currentTarget.getAttribute('data-id');
                try {
                    const response = await axios.post(`/admin/delete/${postId}`);
                    if (response.data.success) {
                        showAlert('Post deleted successfully!', 'success');
                        setTimeout(() => location.reload(), 2000);
                    } else {
                        showAlert('Error deleting post: ' + response.data.message, 'error');
                    }
                } catch (error) {
                    console.error('Error deleting post:', error);
                    showAlert('Error deleting post', 'error');
                }
            }
        }

        async function handleToggleFeatured(event) {
            const postId = event.currentTarget.getAttribute('data-id');
            try {
                const response = await axios.post(`/admin/toggle-featured/${postId}`);
                if (response.data.success) {
                    event.currentTarget.querySelector('svg').classList.toggle('text-yellow');
                    event.currentTarget.querySelector('svg').setAttribute('fill', response.data.isFeatured ? 'currentColor' : 'none');
                    showAlert('Featured status updated successfully', 'success');
                } else {
                    showAlert('Error toggling featured status: ' + response.data.message, 'error');
                }
            } catch (error) {
                console.error('Error toggling featured status:', error);
                showAlert('Error toggling featured status', 'error');
            }
        }

        async function handleToggleRecent(event) {
            const postId = event.currentTarget.getAttribute('data-id');
            try {
                const response = await axios.post(`/admin/toggle-recent/${postId}`);
                if (response.data.success) {
                    event.currentTarget.querySelector('svg').classList.toggle('text-blue');
                    event.currentTarget.querySelector('svg').setAttribute('fill', response.data.isRecent ? 'currentColor' : 'none');
                    showAlert('Recent status updated successfully', 'success');
                } else {
                    showAlert('Error toggling recent status: ' + response.data.message, 'error');
                }
            } catch (error) {
                console.error('Error toggling recent status:', error);
                showAlert('Error toggling recent status', 'error');
            }
        }

        async function handlePostSubmit(event) {
            event.preventDefault();
            const formData = new FormData(event.target);
            formData.set('content', editor.getContent());

            try {
                const response = await axios.post(event.target.action, formData, {
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    }
                });
                if (response.data.success) {
                    showAlert('Post saved successfully!', 'success');
                    setTimeout(() => window.location.href = '/admin', 2000);
                } else {
                    showAlert('Error saving post: ' + response.data.message, 'error');
                }
            } catch (error) {
                console.error('Error saving post:', error);
                showAlert('Error saving post: ' + (error.response?.data?.message || error.message), 'error');
            }
        }

        async function addCategory() {
            const newCategory = document.getElementById('newCategory').value;
            if (newCategory) {
                try {
                    const response = await axios.post('/admin/add-category', { name: newCategory });
                    const category = response.data;
                    const select = document.getElementById('categories');
                    const option = new Option(category.name, category.id);
                    select.add(option);
                    document.getElementById('newCategory').value = '';
                    showAlert('Category added successfully!', 'success');
                } catch (error) {
                    console.error('Error adding category:', error);
                    showAlert('Error adding category', 'error');
                }
            }
        }

        async function addTag() {
            const newTag = document.getElementById('newTag').value;
            if (newTag) {
                try {
                    const response = await axios.post('/admin/add-tag', { name: newTag });
                    const tag = response.data;
                    const select = document.getElementById('tags');
                    const option = new Option(tag.name, tag.id);
                    select.add(option);
                    document.getElementById('newTag').value = '';
                    showAlert('Tag added successfully!', 'success');
                } catch (error) {
                    console.error('Error adding tag:', error);
                    showAlert('Error adding tag', 'error');
                }
            }
        }

        function showAlert(message, type) {
            const alertContainer = document.getElementById('alertContainer');
            const alertElement = document.createElement('div');
            alertElement.className = `alert alert-${type}`;
            alertElement.textContent = message;
            alertContainer.appendChild(alertElement);
            setTimeout(() => alertContainer.removeChild(alertElement), 5000);
        }
    </script>
</body>
</html>